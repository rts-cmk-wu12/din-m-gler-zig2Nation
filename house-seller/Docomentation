* Login
    Email: lasses@
    kodeord: 123456

* Mine valg af tech-stack
 -Next.js
    Jeg har valgt at bruge Next.js som mit framework, da det er et React-baseret framework, der tilbyder moderne funktioner som:

    Server-side rendering (SSR): Dynamiske sider gengives på serveren, hvilket forbedrer både SEO og performance.
    Static site generation (SSG): Statiske sider bygges ved build-tid, hvilket gør dem hurtige og cachebare. SSR og SSG øger også   SEO-optimeringen ved at sikre bedre håndtering af meta-tags.

    API Routes: Next.js gør det muligt at bygge en backend direkte i projektet uden behov for et separat serverframework.

    Andre fordele ved Next.js inkluderer:

    Billedoptimering: Next.js leverer billedhåndtering via next/image, som optimerer størrelsen og kvaliteten af billeder i mit projekt.

    Code splitting: Loader kun det nødvendige JavaScript for den pågældende side, hvilket reducerer loading-tiden.

    Forudindlæsning af links: Navigationen føles hurtigere, da Next.js automatisk forudindlæser sider, du linker til.

    Jeg valgte Next.js, fordi jeg allerede kendte React, og Next.js føltes som en naturlig udvidelse med moderne funktioner. Det er et fleksibelt   framework, der håndterer både frontend og backend og optimerer SEO, hvilket er vigtigt for mit projekt.

    -TypeScript
    TypeScript er et statisk typet superset af JavaScript, som jeg har valgt at bruge af følgende grunde:

    Fejlretning: TypeScript hjælper med at opdage fejl, mens jeg skriver koden, i stedet for først når jeg kører projektet. Det sparer tid og gør   debugging lettere.

    Typer: TypeScript kræver, at man angiver datatyper, hvilket gør det lettere for kolleger at forstå koden og finde rundt i projektet sågar   også for mig selv.

    Robusthed og samarbejde: Ved at bruge TypeScript reducerer jeg sandsynligheden for bugs og gør koden mere overskuelig og    vedligeholdelsesvenlig.

    Jeg valgte TypeScript for dets robusthed og muligheden for at arbejde mere effektivt i teams.



    -Tailwind CSS
    Jeg har valgt Tailwind CSS som mit styling-framework, fordi det giver fuld kontrol over designet uden at være låst til foruddefinerede  komponenter, som man ofte er i frameworks som Bootstrap.

    Utility-first design: Med Tailwind CSS kan jeg skrive præcise og hurtige styles direkte i mit JSX. Det fjerner behovet for lange CSS-filer.

    Konfigurerbarhed: Tailwind genererer en tailwind.config.js-fil, hvor jeg kan definere globale regler for farver, typografi og spacing. Det  sikrer et ensartet design på tværs af projektet.

    Responsivt design: Tailwind gør det nemt at håndtere forskellige skærmstørrelser direkte med klasser som:
    html

    <div class="text-lg sm:text-xl lg:text-2xl"></div>
    Her ændres tekststørrelsen baseret på skærmbredden, uden behov for komplekse media queries.

    Eksempel på en typisk media query, som Tailwind gør overflødig:


    @media only screen and (max-width: 600px) {
      body {
        background-color: lightblue;
      }
    }

    Jeg valgte Tailwind CSS, fordi det er hurtigt at lære, giver fuld frihed til at designe uden begrænsninger og gør det nemt at skabe     responsivt design.



* Perspektivering

    -React alene
    react er populeært men det mangler de avnacerede funktioner som sever-side rendering(SSR)
    react mangler også billed optimering
    react skal man også react-router hvor man konfigurer webpack manuelt

    så jeg har valgt og bruge Next.js for fleksibelt (SEO) optimering. Den minder også om react bare lige en tak mere opdateret til den nyere verden så jeg vil sige Next.js er god til både store og små projekter


    -JavaScript
    jeg valgt og bruge TypeScript istedet for JavaScript da jeg bedere kan lig TypeScripts statiske typer så hvis jeg får fejl holder TypeScript øje og fortæller mig der er en fejl med det samme. JavaScript har støre chance for og lade et par fejl gå igennem som øger muligheden for bugs

    -Bootstrap
    bootestarp har allerede lavet designet for dig så man er hurtigt igang men det bliver meget ensformet design, hvormod TailWind CSS giver dig mulighed for at style selv så det ikke bliver for ensformit, TailWind CSS gør det nemmere og lave præcise og responsivt tilpassede designs, og giver dig fri mulighed




* dette er min valgte kode på og få min mæglere ind så man kan se dem alle

i denne del af mit project bruger jeg 'use client' fordig det er client side.
jeg bruger interface for og give min variabler typer som 'number og sting'
jeg sætter de 3 her jeg bruger som en useState det det er noget der sakl ændre sig.

den første const laver et array som mine employees skal ligge i
nummer 2 er bare en loading skærm der kommer frem inden jeg får noget fra apiet den er true fordi det tar lidt tid og hente fra apiet
nummer 3 den sætter en error hvis der går noget galt som hvis jeg slet ikke får noget simder den en error isteedet for der bare står loading
    const [employees, setEmployees] = useState<EmployeeData[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);


jeg bruger useEffect til og fetche fra min api med det api kald
da useEffect kan køre asyncron så den venndt til den får noget fra fetchet
vi bruger methode: "GET" fordi det noget jeg skal have

så har jeg en if denne her

if (!response.ok) {
                    throw new Error("Error fetching 3 employees");
                }
den siger hvis IKKE response er ok så smid en ny error og det gør den hvis vi ikke får noget og der kommer en fejl, ellers køre kaldet videre

den køre videre ned til det næste (jeg consol.log for og se om jeg får nogert fra mit api)
const data = await response.json();
                console.log("Fetched data from API:", data);
                setEmployees(data);
                setLoading(false);
            } catch (error: any) {
                setError(error.message);
                setLoading(false);

min setEmloyees(data) er det som indholder det jeg får fra apiet som skal bruges
og nu er setLoading(false) fordi jeg har fået noget fra apit så nu skal der ikke stå loading mere

min catch griber ind hvis der sker noget helt uventet så sætter den også setLoading til false


til slut kalder vi på funktionen
fetchThreeEmployees() får og få data

jeg har et dependcy array som gør den køre hver gang der sker noget nyt på siden

så indsætter jeg de forskellige ting ind i mit jsx for det bliver vist

som denner her det er beskeden loadding {loading && <p>Loading...</p>} 


'use client'
import { useEffect, useState } from "react";
import { IoIosMail } from "react-icons/io";
import Link from "next/link";

interface EmployeeData {
    id: string | number;
    name: string;
    title: string;
    image: { url: string };
}

export default function AllBrokers() {
    const [employees, setEmployees] = useState<EmployeeData[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchThreeEmployees = async () => {
            try {
                const response = await fetch("https://dinmaegler.onrender.com/agents", {
                    method: "GET",
                });

                if (!response.ok) {
                    throw new Error("Error fetching 3 employees");
                }

                const data = await response.json();
                console.log("Fetched data from API:", data);
                setEmployees(data);
                setLoading(false);
            } catch (error: any) {
                setError(error.message);
                setLoading(false);
            }
        };

        fetchThreeEmployees(); // Call the function to fetch data
    }, []);

    return (
        <section className="flex flex-col items-center justify-center mt-32 mb-20">
            {loading && <p>Loading...</p>} 
            {error && <p className="text-red-500">Error: {error}</p>}

            <article className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-[5em]">
                {employees.map((employee) => (
                    <div
                        key={employee.id}
                        className="flex flex-col items-center bg-gray-100 rounded shadow-md w-[19em] gap-2 mt-"
                    >
                        <img
                            src={employee.image.url}
                            alt={employee.name}
                            className="w-full h-[17em] object-cover mb-4"
                        />
                        <Link href={`/ContactAnEmployee/${employee.id}`}>
                            <h3 className="text-xl font-bold hover:underline underline-offset-4 cursor-pointer">{employee.name}</h3>
                        </Link>
                        <p className="text-[#7B7B7B]">{employee.title}</p>
                        <div className="flex flex-row items-center gap-2 mb-3">
                            <IoIosMail />
                            <p className="font-bold">in</p>
                        </div>
                    </div>
                ))}
            </article>
        </section>
    );
}



* Diverse sider jeg har brugt igennem min opgave

    -Links

    dette link er til tailwind css som jeg har brugt til hjælp af styling
    https://tailwindcss.com/

    dette link er brugt i forhold til alle iconer som pile, telefoner, login og ud personen og Email
    https://react-icons.github.io/react-icons/

    dette link er for jeg kunne finde ud af og lave regex til en formvalidering
    https://uibakery.io/regex-library/email

    dette link er til noget nyt jeg er introducret til som er zod formvalidering
    https://canopas.com/next-js-how-to-validate-forms-on-the-server-side-using-zod

    dette link er for jeg kunne læse lidt omkring interface og typer
    https://www.w3schools.com/typescript/typescript_aliases_and_interfaces.php

    jeg har også brugt nogle ting fra min tidligere opgaver jeg har lavet





    * ændringer iforhold tli figma design
    jeg har lavet hover efekt med undeline under de fleste links jeg har
    jeg har undladet og lave den footer der er på HOV! siden da jeg ikke mener det ikke følger designet
    jag har undladet og have 2 scroll enheder på min price range

    * Ting jeg gerne ville have gjort bedere og ting jeg er tilfredsse med
    jeg ville gerne have noget det hele men da der var nogle ting der to tid trak det ud, så jeg sad fast i for lang tid de samme steder. Alt i alt syndes jeg at mit endlige projekt er okay selfølgelig mangler der lidt.